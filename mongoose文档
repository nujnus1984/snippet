Mongoose 参考手册
标签（空格分隔）： MongoDB

Mongoose 是什么?
一般我们不直接用MongoDB的函数来操作MongoDB数据库 Mongose就是一套操作MongoDB数据库的接口.


;-------------------------------------------------------------
Schema
一种以文件形式存储的数据库模型骨架，无法直接通往数据库端，也就是说它不具备对数据库的操作能力.
可以说是数据属性模型(传统意义的表结构)，又或着是“集合”的模型骨架


/* 定义一个 Schema */var mongoose = require("mongoose");var TestSchema = new mongoose.Schema({
    name : { type:String },//属性name,类型为String
    age  : { type:Number, default:0 },//属性age,类型为Number,默认为0
    time : { type:Date, default:Date.now },
    email: { type:String,default:''}});
上面这个 TestSchema包含4个属性 [name, age, time, email]

;-------------------------------------------------------------
Model
由Schema构造生成的模型，除了Schema定义的数据库骨架以外，
还具有数据库操作的行为，类似于管理数据库属性、行为的类
var db = mongoose.connect("mongodb://127.0.0.1:27017/test");// 创建Modelvar TestModel = db.model("test1", TestSchema);
test1 数据库中的集合名称, 不存在会创建.

;-------------------------------------------------------------
Entity
由Model创建的实体，使用save方法保存数据，
Model和Entity都有能影响数据库的操作，但Model比Entity更具操作性

var TestEntity = new TestModel({
       name : "Lenka",
       age  : 36,
       email: "lenka@qq.com"});console.log(TestEntity.name); // Lenkaconsole.log(TestEntity.age); // 36

游标
MongoDB 使用游标返回find的执行结果.客户端对游标的实现通常能够对最终结果进行有效的控制。
可以限制结果的数量，略过部分结果，
根据任意键按任意顺序的组合对结果进行各种排序，或者是执行其他一些强的操作。

;-------------------------------------------------------------
ObjectId

存储在mongodb集合中的每个文档（document）都有一个默认的主键_id，
这个主键名称是固定的，它可以是mongodb支持的任何数据类型，默认是ObjectId。

ObjectId是一个12字节的 BSON 类型字符串。按照字节顺序，依次代表：
4字节：UNIX时间戳
3字节：表示运行MongoDB的机器
2字节：表示生成此_id的进程
3字节：由一个随机数开始的计数器生成的值

;-------------------------------------------------------------
Node.js 中

package.json 中加入"mongoose": “*” 字段
npm install 安装依赖.

var mongoose = require("mongoose");
var db = mongoose.connect("mongodb://localhost:27017/test");
然后引用

;-------------------------------------------------------------
API

var mongoose = require("mongoose");var db = mongoose.connect("mongodb://localhost:27017/test");
db - 数据库操作

1.挂接数据库连接事件,参数1: 也可以是error.

db.connection.on('open’, callback);

Schema - 表结构

1.构造函数

new mongoose.Schema( { name:{type:String}, age:{type:Number, default:10}  } )

2.添加属性

Schema.add( { name: 'String’, email: 'String’, age: ‘Number’ } )



3.有时候Schema不仅要为后面的Model和Entity提供公共的属性，还要提供公共的方法

Schema.method( 'say’, function(){console.log(‘hello’);} )
//这样Model和Entity的实例就能使用这个方法了

4.添加静态方法

Schema.static( 'say’, function(){console.log(‘hello’);} )
//静态方法，只限于在Model层就能使用


5.追加方法

Schema.methods.say = function(){console.log(‘hello’);};
//静态方法，只限于在Model层就能使用

;-------------------------------------------------------------

model - 模型操作
db.model("test1", TestSchema );       //构造函数, 参数1:集合名称, 参数2:Schema实例

model.find({}, callback);             //查询, 参数1忽略,或为空对象则返回所有集合文档
model.find({},field,callback);        //过滤查询,参数2: {’name’:1, 'age’:0} 查询文档的返回结果包含name , 不包含age.(_id默认是1)
model.find({},null,{limit:20});       //过滤查询,参数3: 游标操作 limit限制返回结果数量为20个,如不足20个则返回所有.
model.findOne({}, callback);          //查询找到的第一个文档
model.findById('obj._id’, callback);  //查询找到的第一个文档,同上. 但是只接受 __id 的值查询
;-------------------------------------------------------------
Model.create(文档数据, callback))                  //创建, 在集合中创建一个文档
Model.update(conditions, update, function(error)   //更新,参数1:查询条件, 参数2:更新对象,可以使用MondoDB的更新修改器
Model.remove(conditions,callback);                 //删除, 参数1:查询条件

;-------------------------------------------------------------
Entity - 文档操作
new TestModel( { name:’xueyou’, age:21 } );        //构造函数, 其实就是model的实例
Entity.save(callback);                             //创建, 在集合中创建一个文档.


;-------------------------------------------------------------
修改器和更新器

更新修改器:

‘$inc’ 增减修改器,只对数字有效.下面的实例: 找到 age=22的文档,修改文档的age值自增1

Model.update({’age’:22}, {’$inc’:{’age’:1} }  );
执行后: age=23

‘$set’ 指定一个键的值,这个键不存在就创建它.可以是任何MondoDB支持的类型.

Model.update({’age’:22}, {’$set’:{’age’:’haha’} }  );
执行后: age=’haha’

‘$unset’ 同上取反,删除一个键

Model.update({’age’:22}, {’$unset’:{’age’:’haha’} }  );
执行后: age键不存在

;-------------------------------------------------------------
数组修改器:

‘$push’ 给一个键push一个数组成员,键不存在会创建

Model.update({’age’:22}, {’$push’:{’array’:10} }  );
执行后: 增加一个 array 键,类型为数组, 有一个成员 10

‘$addToSet’ 向数组中添加一个元素,如果存在就不添加

Model.update({’age’:22}, {’$addToSet’:{’array’:10} }  );
执行后: array中有10所以不会添加

‘$each’ 遍历数组, 和 $push 修改器配合可以插入多个值

Model.update({’age’:22}, {’$push’:{’array’:{’$each’: [1,2,3,4,5]}} }  );
执行后: array : [10,1,2,3,4,5]

‘$pop’ 向数组中尾部删除一个元素

Model.update({’age’:22}, {’$pop’:{’array’:1} }  );
执行后: array : [10,1,2,3,4]  tips: 将1改成-1可以删除数组首部元素

‘$pull’ 向数组中删除指定元素

Model.update({’age’:22}, {’$pull’:{’array’:10} }  );
执行后: array : [1,2,3,4]  匹配到array中的10后将其删除

;-------------------------------------------------------------
条件查询:

“$lt” 小于
“$lte” 小于等于
“$gt” 大于
“$gte” 大于等于
“$ne” 不等于
Model.find({"age":{ "$gte":18 , "$lte":30 } } );  //查询 age 大于等于18并小于等于30的文档

;-------------------------------------------------------------
或查询 OR:

‘$in’ 一个键对应多个值
‘$nin’ 同上取反, 一个键不对应指定值
“$or” 多个条件匹配, 可以嵌套 $in 使用
“$not” 同上取反, 查询与特定模式不匹配的文档
Model.find({"age":{ "$in":[20,21,22.’haha’]} } );            //查询 age等于20或21或21或’haha’的文档
Model.find({"$or" :  [ {’age’:18} , {’name’:’xueyou’} ] });  //查询 age等于18 或 name等于’xueyou’ 的文档
;-------------------------------------------------------------

类型查询:

null 能匹配自身和不存在的值, 想要匹配键的值 为null, 就要通过  “$exists” 条件判定键值已经存在
“$exists” (表示是否存在的意思)

Model.find(“age” :  { “$in” : [null] , “exists” : true  } );  // 查询 age值为null的文档

Model.find({name: {$exists: true}},function(error,docs){
  //查询所有存在name属性的文档});Model.find({telephone: {$exists: false}},function(error,docs){
  //查询所有不存在telephone属性的文档});

;-------------------------------------------------------------
正则表达式:

MongoDb 使用 Prel兼容的正则表达式库来匹配正则表达式

find( {"name" : /joe/i } )     // 查询name为 joe 的文档, 并忽略大小写

find( {"name" : /joe?/i } )    // 查询匹配各种大小写组合
;-------------------------------------------------------------
查询数组:
Model.find({"array":10} );     //查询 array(数组类型)键中有10的文档,  array : [1,2,3,4,5,10]  会匹配到

Model.find({"array[5]":10} );  //查询 array(数组类型)键中下标5对应的值是10,  array : [1,2,3,4,5,10]  会匹配到

‘$all’ 匹配数组中多个元素
Model.find({"array":[5,10]} ); //查询 匹配array数组中 既有5又有10的文档


‘$size’ 匹配数组长度
Model.find({"array":{"$size" : 3} } ); //查询 匹配array数组长度为3 的文档


‘$slice’ 查询子集合返回
Model.find({"array":{"$skice" : 10} } );       //查询 匹配array数组的前10个元素
Model.find({"array":{"$skice" : [5,10] } } );  //查询 匹配array数组的第5个到第10个元素
;-------------------------------------------------------------
where
//用它可以执行任意javacript语句作为查询的一部分,如果回调函数返回 true 文档就作为结果的一部分返回

    find( {"$where" : function(){
        for( var x in this ){
         //这个函数中的 this 就是文档
        }

        if(this.x !== null && this.y !== null){
            return this.x + this.y === 10 ? true : false;
        }else{
            return true;
        }
        }})

简化版本
    find( {"$where" :  "this.x + this.y === 10" } )
    find( {"$where" : " function(){ return this.x + this.y ===10; } " } )

游标:
    limit(3) 限制返回结果的数量,
    skip(3) 跳过前3个文档,返回其余的
    sort( {"username":1 , "age":-1 } ) 排序 键对应文档的键名, 值代表排序方向, 1 升序, -1降序



;-------------------------------------------------------------
mongoose 之Shema


目录[-]
Schema.Types
Schema#method(method, [fn])
Schema#path(path, constructor)
Schema#post(method, fn)
Schema#static(name, fn)

    总之,见到我写点啥简直是奇迹，由于现在喜欢上玩转node.js +mongoose，个人爱好，
靠近前端的又是英文文档，苦逼得很，悟出来一个写一个吧。
之前喜欢误打误撞，网上搜索一点解决一下问题，后来实在难看得很，
为啥，解决一个小问题又来大问题，刚解决完大问题，有来巨大的bug，
所有必需系统的学习，就算爱折腾也得有点头绪，决定先认真看完文档再说吧，
免得想开发点啥都折腾得没有兴趣了……。


    首先我们得知道Schema常用的有哪些数据类型，
不能只知道需要一个见一个就用一个，
这样会感觉一直在摸索中探寻，不能把握全局。

Schema.Types

String  字符串
Number 数字，什么int啊，float啊，double啊，都只有这个Number就哦了
Boolean | Bool
Array 数组
Buffer 二进制
Date 日期
ObjectId | Oid mongodb主键一般都是用{_id:Schema.Types.objectId}
Mixed 这个强大，混合型的，也就是当你不确定这个属性存什么的时候设置为它吧，
      如果在被确立类型赋值后，需要用到一个函数来通知修改这个类型。下文会讲到。
如何定义使用呢，请往下看：

var mongoose = require('mongoose');
var ObjectId = mongoose.Schema.Types.ObjectId;
当然可以简略使用，请看如下定义

//定义children的子嵌套
var child = new Schema({ name: String });
//添加字段方式1
var schema = new Schema({ name: String, age: Number, children: [child]});
//添加字段方式2
//var schema = new Schema;
//    schema.add({name :String, age: Number, children: [child] });


var Tree = mongoose.model('Tree', schema); 
// 设置 schema 选项
new Schema({ name: String }, { _id: false, autoIndex: false })

    重点讲的就是，我们在"定义嵌套文档"是一般都不需要自动生成的_id，和索引对不？
    我们只要在Schema的第二个参数里设置下即可：
    _id:false或者_id:0，禁止自动生成主键
    autoIndex:false 或者autoIndex:0 禁止自动创建索引
    对了 false可以用数字0表示，true嘛你懂的。还有跟多的选项供你按需使用。一大串。

     Options: 其他可选项

        autoIndex: bool - 默认 true
        bufferCommands: bool - 默认 true
        capped: bool - 默认 false
        collection: string - 无
        id: bool - 默认 true
        _id: bool - 默认 true
        minimize: bool - controls document#toObject behavior when called manually - 默认 true
        read: string
        safe: bool - 默认 true.
        shardKey: bool - 默认 null
        strict: bool - 默认 true
        toJSON - object - 无
        toObject - object - 无
        versionKey: bool - 默认 "__v" 这玩意儿有些讨厌，会自动在数据库里生成这个字段，最好禁用。


;----------------------------------------------
Schema#method(method, [fn])

     这个method方法很不错，
当我们增删查改完想返回必要数据是可以交给此方法来做。
如果一个方法的时候在method第一个参数设定方法名字符串，
第二个参数为回调函数，如下：

var schema = kittySchema = new Schema(..);
schema.method('meow', function () { console.log('meeeeeoooooooooooow'); })

var Kitty = mongoose.model('Kitty', schema);
var fizz = new Kitty;
fizz.meow(); // meeeeeooooooooooooow


    如果多个方法的时候，可以同时绑定，如下来使用。
当然你也可以一个一个的如上面的列子来写。

schema.method({
    purr: function () {}
  , scratch: function () {}
});

// later
fizz.purr();
fizz.scratch();

;----------------------------------------------
Schema#path(path, constructor)

这个path方法用于修改属性的类型，
原来已经定义好的属性name的Schema类型为String，要改成Number就这样使用。 

schema.path('name', Number) //修改name的数据类型
    如果要获取这个属性的数据类型，使用

schema.path('name') // 返回一个 Schema的类型

;----------------------------------------------
Schema#post(method, fn)
//对于这个方法，用处在于把自定义的处理方法添加到event  emitter事件循环上去，
//给shema注册事件并能接收model处理后返回的文档，使用model实例来调用。


var schema = new Schema(..);
schema.post('save', function (doc) {
  console.log('this fired after a document was saved');
});

var Model = mongoose.model('Model', schema);

var m = new Model(..);
m.save(function (err) {
  console.log('this fires after the `post` hook');
});


;----------------------------------------------
Schema#static(name, fn)

注册静态方法，用实例直接调用，不需要再new一下了

var schema = new Schema(..);
schema.static('findByName', function (name, callback) { return this.find({ name: name }, callback); });

var Drink = mongoose.model('Drink', schema);
Drink.findByName('sanpellegrino', function (err, drinks) { });



;------------------------------------------------------------------------------------------------------------------------------------------
mongodb

mongodb现在似乎已经成了node.js社区最自然的存储层选择，所以这里也不比较，直接mongodb。附加一个简单介绍。

mongodb是10gen公司开发的开源数据库产品，它的存储机制不是关系型的表，而是json。它所宣称的卖点有：

动态模式的文档数据模型
全面、灵活的索引机制及丰富的查询功能
能形成水平扩展能力的自动分片机制
能形成高可用性的复制机制
文本搜索
先进的安全性
聚合框架及MapReduce
用GridFS支持大量媒体文件的存储
因为它是动态模式的数据库，所以我们只要把它装上就行，不用create database，
也不用create table，更加不用alter table add column。
所以关于mongodb，只要了解如何安装就行了。
不过如果你选择自己在代码中直接操作mongodb，那还是要多花点功夫的。

BTW，因为产品名气太大，10gen改名叫mongodb了。

;------------------------------------------------------------------------------------------------------------------------------------------

mongoose

mongoose是为node.js准备的mongodb访问层，它号称自己提供了简单直接，基于模式的应用数据建模方案，还有类型转换、数据校验、查询构建、业务逻辑触发器等各种趁手的小工具。

在M层，mongoose是我们选择的核心，几乎一切都和他有关。所以我们先把它装上：

npm install mongoose
别忘了在package.json中加上这个依赖项。

之后就可以配置mongoose，连接数据库了：

在app.js 中require('mongoose')，然后connect就可以了：

mongoose.connect('mongodb://localhost/nodecoffee');
做好准备工作，创建我们的第一个model，转到models目录下，创建User.coffee:

mongoose = require 'mongoose'
bcrypt = require 'bcrypt'

Schema = mongoose.Schema
UserSchema = new Schema 
  username:
    type: String
    index: true

  password:
    type: String

  email:
    type: String
    unique: true

User = mongoose.model 'User', UserSchema
bcrypt 是为了给密码加密引入的，不多介绍，记得npm install就行了。这样model就可以用了，最起码实现注册功能没问题。代码看起来也很简单直接。定义Schema，每个字段都是名称，类型加各种特性。

密码的加密保存有两种实现方式，可以在controller层完成，在所有涉及密码修改和保存的方法中都先把密码加密后再设置给model的password属性；也可以在model层内部以hook的方式实现，每次save之前都判断密码是否被修改了，如果修改了密码，则对密码加密。第一种方式代码维护起来麻烦，但在性能方面占优，作为一名三流码农，我们是不会优先考虑性能的，所以第二种一般会在第一轮胜出，先挖一个微不足道的调优坑 ;)。恰好mongoose引入了hook.js，可以在model的Schema上加一个pre方法，而且还有isModified方法方便我们判断某个属性是否被修改了。于是就有了下面这段代码：

UserSchema.pre 'save', (next) ->
  user = this
  SALT_WORK_FACTOR = 10

  return next() unless user.isModified 'password'

  bcrypt.genSalt SALT_WORK_FACTOR, (err, salt) ->
    if err
      console.error err
      return next err 
    bcrypt.hash user.password, salt, (err, hash) ->
      if err
        console.error err
        return next err 
      user.password = hash
      next()
      return
    return
pre的第一个参数是方法名，第二个参数是callback函数，方法名可以是model对象中任何有效的方法，比如update、validate、find等等。mongoose还有与pre对应的post方法，可以在某个方法完成后执行callback函数。

密码的加密是Schema级的pre方法，而要验证密码，我们可以添加文档级的method :comparePassword:

UserSchema.methods = 
  comparePassword : (candidatePassword, cb) ->
    bcrypt.compare candidatePassword,@password, (err, isMatch) ->
      if err
        return cb err
      cb(null, isMatch)
好吧，我们并没用mongoose的Schema#method(method, [fn])方法**添加**method，而是直接设置了methods，因为mongoose的method方法支持以name/fn对为参数，比如：

schema.method({
    purr: function () {}
  , scratch: function () {}
});
而这些函数实际上就是加到methods中的。

methods中的方法都是文档级的，也就是说如果我们创建了一个user对象，则可以在这个对象上调用comparePassword，这个方法中的@password表示该对象的password(@ 相当于js中的this.)。

如果要添加schema级的方法，可以用Schema#static(name, fn)，这个方法跟method类似，也可以接受name/fn对为参数，并将这些函数加到statics中。所以如果我们想在schema级加一个根据email查找用户的方法，可以写成：

#
# Schema statics
#
UserSchema.statics =
  findByEmail: (email, cb) ->
    @findOne({ email : email })
    .exec(cb)
statics中的方法都是schema级，或者说model级的，跟save、update、find等平级，可以在model上直接调用，经常用来添加一些常用的定制查询，比如上面的findByEmail。

@findOne({email:email}) 就是mongoose中Model的查询方法Model.findOne(conditions, [fields], [options], [callback]) ，找到email跟参数中的email匹配的一个用户文档。

此外比较常用的model方法还有find、findById、count、save、update、remove等。还有一个populate，可以选择获取关联文档的哪些字段。

model准备就绪，我们接下来去做页面。
;------------------------------------------------------------------------------------------------------------------------------------------


